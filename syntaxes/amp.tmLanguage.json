{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Amp",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#entities"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comments"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.operator.as.amp",
					"match": "\\b(as)\\b"
				},
				{
					"name": "constant.language.boolean.amp",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "storage.modifier.const.amp",
					"match": "\\b(const)\\b"
				},
				{
					"name": "keyword.control.else.amp",
					"match": "\\b(else)\\b"
				},
				{
					"name": "storage.modifier.export.amp",
					"match": "\\b(export)\\b"
				},
				{
					"name": "storage.type.function.amp",
					"match": "\\b(func)\\b"
				},
				{
					"name": "keyword.control.if.amp",
					"match": "\\b(if)\\b"
				},
				{
					"name": "storage.type.import.amp",
					"match": "\\b(import)\\b"
				},
				{
					"name": "storage.modifier.mut.amp",
					"match": "\\b(mut)\\b"
				},
				{
					"name": "storage.type.namespace.amp",
					"match": "\\b(namespace)\\b"
				},
				{
					"name": "keyword.control.return.amp",
					"match": "\\b(return)\\b"
				},
				{
					"name": "storage.type.struct.amp",
					"match": "\\b(struct)\\b"
				},
				{
					"name": "storage.type.var.amp",
					"match": "\\b(var)\\b"
				},
				{
					"name": "keyword.control.while.amp",
					"match": "\\b(while)\\b"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.colon.amp",
					"match": ":"
				},
				{
					"name": "punctuation.semi.amp",
					"match": ";"
				},
				{
					"name": "punctuation.comma.amp",
					"match": ","
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arrow.amp",
					"match": "->"
				},
				{
					"name": "keyword.operator.borrow.amp",
					"match": "~"
				}
			]
		},
		"entities": {
			"patterns": [
				{
					"name": "entity.name.function.amp",
					"match": "\\b([\\p{XIDStart}_]\\p{XIDContinue}*)(?=\\()"
				},
				{
					"name": "entity.name.type.primitive.amp",
					"match": "\\b(bool)\\b"
				},
				{
					"name": "entity.name.type.numeric.amp",
					"match": "\\b([ui](8|16|32|64)|u?int)\\b"
				},
				{
					"name": "entity.name.struct.amp",
					"match": "(?<=struct\\s+([\\p{XIDStart}_]\\p{XIDContinue}*\\s*\\.\\s*)*)([\\p{XIDStart}_]\\p{XIDContinue}*)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.amp",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.amp",
					"match": "\\\\(n|r|t|\\\\|0|\"|x\\{[0-9a-fA-F]+\\})"
				}
			]
		},
		"comments": {
			"name": "comment.line.double-slash.amp",
			"begin": "//",
			"end": "$"
		}
	},
	"scopeName": "source.amp"
}